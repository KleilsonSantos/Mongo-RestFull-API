name: ⚙️ CI Core Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name: 🔧 TypeScript Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-node
        with:
          node-version: ${{ matrix.node-version }}
      - run: npx tsc

  lint:
    name: 🧐 Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-node
        with:
          node-version: 20
      - run: npm run lint
      - run: npm run format

  test:
    name: 🧪 Run Unit Tests
    needs: [lint, build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-node
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm run test:coverage:sonar

      - name: ⬆️ Upload Coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          overwrite: true

  sonar:
    name: 🔍 SonarQube Analysis
    needs: test
    runs-on: ubuntu-latest
    env:
     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/setup-node
        with:
          node-version: 20
      - name: 🔧 Setup SonarScanner
        uses: sonarsource/sonarcloud-github-action@v3
  
      - name: 📝 Save Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: coverage/lcov-report
          overwrite: true

  webpack:
    name: 📦 Webpack Build
    needs: [build]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-node
        with:
          node-version: ${{ matrix.node-version }}
      - run: npx webpack

  docker-compose:
    name: 🐳 Docker Compose Tests
    needs: [sonar]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v2
      - run: |
          sudo apt-get update
          sudo apt-get install docker-compose -y
      - run: docker-compose -f docker-compose.yml up -d --build
      - run: docker-compose -f docker-compose.yml exec -T mongo-rest-api npm run test
      - run: docker-compose -f docker-compose.yml down

  deploy:
    name: 🚀 Deploy to Production (Mock)
    needs: [docker-compose]
    runs-on: ubuntu-latest
    steps:
      - run: echo "🚀 Deploying to production... (Simulated)"
