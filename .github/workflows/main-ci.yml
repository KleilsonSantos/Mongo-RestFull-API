name: ⚙️ CI Core Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    name: 📦 Build
    #   needs: setup
    steps:
      - name: Validate environment variables
        run: env
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4
      - name: ⚙️ Setup Node.js (v20)
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: 📦 Install Dependencies
        run: 
          npm ci

  setup:
    name: 🛠️ Setup & Build
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4
      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: 📦 Install Dependencies
        run: npm ci
      - name: ⏳ Cache Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
      - name: 🏗️ Build Project
        run: npm run build
      - name: 🔄 Wait Before Upload (Prevent Token Error)
        run: sleep 5
      - name: 🔄 Save Build Artifacts
        if: env.ACT != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: dist/

  lint:
    name: 🧐 Run ESLint
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4
      - name: ⚙️ Setup Node.js (v20)
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: 📦 Install Dependencies
        run: npm ci
      - name: 🧐 Run ESLint
        run: npm run lint
      - name: 🧹 Check Formatting with Prettier
        run: npm run format

  test:
    name: 🧪 Run Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    env:
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
    steps:
      - name: ✅ Execute Tests & Generate Coverage
        run: npm run test:coverage

  sonar:
    name: 📥 Download Coverage Results
    runs-on: ubuntu-latest
    needs: test
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    steps:
      - name: 📝 Save Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: coverage/
      - name: ⬇️ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed to analyze history
      - name: ⚙️ Setup Node.js (v20)
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: 📦 Install Dependencies
        run: npm ci
      - name: 📊 Run SonarQube Scanner
        run: |
          npx sonar-scanner \
            -Dsonar.projectKey=mongo-rest-api \
            -Dsonar.organization=sua_org \
            -Dsonar.sources=src \
            -Dsonar.tests=tests \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  deploy:
    name: 🚀 Deploy to Production (Mock)
    runs-on: ubuntu-latest
    #needs: sonar
    steps:
      - name: 📢 Announce Deployment
        run: echo "🚀 Deploying to production... (Simulated)"
