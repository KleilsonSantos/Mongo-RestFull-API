#!/bin/bash

set -e

# Caminhos dos arquivos
EVENT_FILE=".github/event-payloads/pull_request.json"
SECRETS_FILE=".secrets"

echo "üîç Validando arquivos necess√°rios..."

# Verifica√ß√£o do arquivo .secrets
if [ ! -f "$SECRETS_FILE" ]; then
  echo "‚ùå Arquivo .secrets n√£o encontrado."
  exit 1
fi

# Verifica√ß√£o do arquivo de evento
if [ ! -f "$EVENT_FILE" ]; then
  echo "‚ùå Arquivo de evento $EVENT_FILE n√£o encontrado."
  exit 1
fi

# Leitura de campos obrigat√≥rios
PR_NUMBER=$(jq -r '.pull_request.number // empty' "$EVENT_FILE")
REPO_NAME=$(jq -r '.repository.name // empty' "$EVENT_FILE")
REPO_OWNER=$(jq -r '.repository.owner.login // empty' "$EVENT_FILE")

# Valida√ß√£o dos campos extra√≠dos
if [[ -z "$PR_NUMBER" || -z "$REPO_NAME" || -z "$REPO_OWNER" ]]; then
  echo "‚ùå Campo(s) ausente(s) no JSON:"
  echo "   ‚û§ PR Number: $PR_NUMBER"
  echo "   ‚û§ Repo Name: $REPO_NAME"
  echo "   ‚û§ Repo Owner: $REPO_OWNER"
  exit 1
fi

echo "‚úÖ JSON verificado com sucesso!"
echo "üìÑ Pull Request: #$PR_NUMBER | Reposit√≥rio: $REPO_OWNER/$REPO_NAME"

# Carrega vari√°veis do arquivo .secrets, se desejar
source "$SECRETS_FILE"

# Usa ACT_TOKEN se estiver definido, sen√£o tenta o GITHUB_TOKEN do ambiente
TOKEN_TO_USE="${ACT_TOKEN:-$GITHUB_TOKEN}"

if [[ -z "$TOKEN_TO_USE" ]]; then
  echo "‚ùå Nenhum token encontrado nas vari√°veis ACT_TOKEN ou GITHUB_TOKEN."
  exit 1
fi

echo "üöÄ Executando 'act' com evento pull_request.json..."
act pull_request -e $EVENT_FILE -s GITHUB_TOKEN=$TOKEN_TO_USE
